#! /usr/bin/env python

__author__ = "Benjamin Quici, Ross J. Turner"
__date__ = "25/02/2021"

# standard imports
import pandas as pd
import sys
import os
import logging
import argparse
import numpy as np
import math

# synchrofit
from sf.synchrofit import spectral_fitter_ as spectral_fitter, spectral_model_ as spectral_model, spectral_plotter, spectral_ages, spectral_units
from sf.helpers import logger, color_text, Colors

# command line version of synchrofit runs from here.
if __name__ == "__main__":
    parser = argparse.ArgumentParser(prefix_chars='-')
    group1 = parser.add_argument_group('Configuration Options')
    group1.add_argument("--data", dest='data', type=str, 
                        help='(No default) Name of the data file containing the input spectrum (requires .dat extension)')
    group1.add_argument('--work_dir', dest='work_dir', type=str, default=None, 
                        help='(Default = None) Directory to which fitting outputs and plots are written to. If None, defaults to current working directory.')
    group1.add_argument("--freq", dest='freq', type=float, nargs='+', default=None, 
                        help='(Default = None) List of input frequencies (if --data is not specified).')
    group1.add_argument("--flux", dest='flux', type=float, nargs='+', default=None, 
                        help='(Default = None) List of input flux densities (if --data is not specified)')
    group1.add_argument("--err_flux", dest='err_flux', type=float, nargs='+', default=None, 
                        help='(Default = None) List of input flux density errors (if --data is not specified)')
    group1.add_argument("--freq_unit", dest='freq_unit', type=str, default='Hz', 
                        help='(Default = None) Input frequency units')
    group1.add_argument("--flux_unit", dest='flux_unit', type=str, default='Jy', 
                        help='(Default = None) Input flux density units')
    
    group2 = parser.add_argument_group('Fitting Options')
    group2.add_argument("--fit_type", dest='fit_type', type=str, default=None, 
                        help='(No default) Model to fit: JP, KP, CI')
    group2.add_argument("--n_breaks", dest='n_breaks', type=int, default=31, 
                        help='(Default = 31) Number of increments with which to sample the break frequency range')
    group2.add_argument("--n_injects", dest='n_injects', type=int, default=31, 
                        help='(Default = 31) Number of increments with which to sample the injection index range')
    group2.add_argument("--n_remnants", dest='n_remnants', type=int, default=31, 
                        help='(Default = 31) Number of increments with which to sample the remnant ratio range')
    group2.add_argument("--n_iterations", dest='n_iterations', type=int, default=3, 
                        help='(Default = 3) Number of iterations.')
    group2.add_argument("--break_range", dest='break_range', type=float, nargs='+', default=[8, 11], 
                        help='(Default = [8, 11]) Accepted range for the log(break frequency) in Hz')
    group2.add_argument("--inject_range", dest='inject_range', type=float, nargs='+', default=[2.01, 2.99], 
                        help='(Default = [2.01, 2.99]) Accepted range for the energy injection index')
    group2.add_argument("--remnant_range", dest='remnant_range', type=float, nargs='+', default=[0, 1], 
                        help='(Default = [0, 1]) Accepted range for the remnant ratio')
    group2.add_argument("--search_space", dest='search_space', type=str, default='prob')

    group3 = parser.add_argument_group('Output Model Options')
    group3.add_argument("--n_model_freqs", dest='n_model_freqs', type=int, default=100, 
                        help='(Default = 100) Number of frequencies to evaluate the model at')
    group3.add_argument("--mc_length", dest='mc_length', type=int, default=500, 
                        help='(Default = 500) Number of Monte-Carlo iterations used to estimate the model uncertainty')
    group3.add_argument("--err_width", dest='err_width', type=int, default=2, 
                        help='(Default = 2) Width of the uncertainty envelope on the model, in units of sigma')

    group4 = parser.add_argument_group('Extra options')
    group4.add_argument('--plot', dest='plot', action='store_true',default=False, 
                        help='(Default = False) If True, produce a plot of the observed spectrum and fitted model')
    group4.add_argument('--write_model', dest='write_model', action='store_true', default=False, 
                        help='(Default = False) If True, write the fitting outputs to file')
    group4.add_argument('--save_prefix', dest='save_prefix', type=str, default=None, 
                        help='(Default = None) Prefix prepended to the name of any written files')

    group5 = parser.add_argument_group('Spectral age options')
    group5.add_argument('--age', dest='age', action='store_true', default=False, 
                        help='(Default = False) If True, determine the spectral age of the source (requires --bfield and --z)')
    group5.add_argument('--b_field', dest='b_field', type=float, default=None, 
                        help='(No default) Magnetic field strength in units of T')
    group5.add_argument('--redshift', dest='redshift', type=float, default=None, 
                        help='(No default) Cosmological redshift of the source')
    options = parser.parse_args()

    if options.data == None and options.freq == None:
        parser.print_help()
        print(color_text('No input data given.', c=Colors.Red))
        sys.exit(1)

    colorstring = color_text("Reading in data", Colors.Orange)
    print("INFO __main__ {}".format(colorstring))
    if options.data:
        if options.work_dir is not None:
            filename = '{}/{}'.format(options.work_dir, options.data)
        else:
            filename = '{}'.format(options.data)
        df_data = pd.read_csv(filename)
        frequency = spectral_units(df_data.iloc[:,1].values, options.freq_unit)
        luminosity = spectral_units(df_data.iloc[:,2].values, options.flux_unit)
        dluminosity = spectral_units(df_data.iloc[:,3].values, options.flux_unit)
    elif options.freq:
        frequency = spectral_units(np.asarray(options.freq), options.freq_unit)
        luminosity = spectral_units(np.asarray(options.flux), options.flux_unit)
        dluminosity = spectral_units(np.asarray(options.err_flux), options.flux_unit)
    
    espace='            '
    colorstring = color_text("Estimating free parameters.", Colors.Orange)
    print("INFO __main__ {}".format(colorstring))
    params = spectral_fitter(frequency, luminosity, dluminosity, options.fit_type, options.n_breaks, \
            options.break_range, options.n_injects, options.inject_range, options.n_remnants, options.remnant_range, \
            options.n_iterations, options.b_field, options.redshift, options.write_model, options.work_dir, options.save_prefix)

    colorstring = color_text("Evaluating model over the observed frequencies", Colors.Orange)
    print("INFO __main__ {}".format(colorstring))
    model_data, err_model_data, model_data_min, model_data_max = spectral_model(params[:-1], frequency, options.mc_length, options.err_width, \
                                                                options.b_field, options.redshift, \
                                                                options.work_dir, options.write_model, '{}-observed'.format(options.save_prefix))
    if options.plot:
        colorstring = color_text("Evaluating model over {} simulated frequencies".format(options.n_model_freqs), Colors.Orange)
        print("INFO __main__ {}".format(colorstring))
        plotting_frequency = np.geomspace(10**(math.floor(np.min(np.log10(frequency)))),10**(math.ceil(np.max(np.log10(frequency)))), options.n_model_freqs)
        plotting_data, err_plotting_data, plotting_data_min, plotting_data_max = spectral_model(params[:-1], plotting_frequency, options.mc_length, options.err_width, \
                                                                options.b_field, options.redshift, \
                                                                options.work_dir, options.write_model, '{}-simulated'.format(options.save_prefix))
        colorstring = color_text("Writing model fit to figure", Colors.Orange)
        print("INFO __main__ {}".format(colorstring))
        observed_data = (frequency, luminosity, dluminosity)
        plotting_data = (plotting_frequency, plotting_data, err_plotting_data, plotting_data_min, plotting_data_max)
        spectral_plotter(observed_data, model_data, plotting_data, work_dir=options.work_dir, \
                        fit_type=options.fit_type, err_model_width=options.err_width, save_prefix=options.save_prefix)
    if options.age:
        colorstring = color_text("Estimating spectral ages", Colors.Orange)
        print("INFO __main__ {}".format(colorstring))
        params = (params[0], 10**params[1], params[5])
        spectral_ages(params, options.b_field, options.redshift)
